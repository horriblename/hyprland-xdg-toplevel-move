#include "src/SharedDefs.hpp"
#include "src/desktop/DesktopTypes.hpp"
#include "src/desktop/Window.hpp"
#include "src/managers/KeybindManager.hpp"
#include "src/managers/input/InputManager.hpp"
#include "src/plugins/PluginAPI.hpp"
#define private public
#include "src/protocols/XDGShell.hpp"
#undef private

#include "globals.hpp"

#include <any>
// version.hpp will be generated by meson
#include "version.hpp"

#include <unistd.h>

// Do NOT change this function.
APICALL EXPORT std::string PLUGIN_API_VERSION() {
    return HYPRLAND_API_VERSION;
}

void OnWindowOpen(void*, SCallbackInfo& cbinfo, std::any args) {
    PHLWINDOW mon = std::any_cast<PHLWINDOW>(args);

    mon->m_pXDGSurface->toplevel->resource->setMove([](CXdgToplevel*, wl_resource*, uint32_t) {
        g_pKeybindManager->changeMouseBindMode(MBIND_MOVE);
    });
}

APICALL EXPORT PLUGIN_DESCRIPTION_INFO PLUGIN_INIT(HANDLE handle) {
    PHANDLE = handle;

    static auto P1 = HyprlandAPI::registerCallbackDynamic(PHANDLE, "openWindow", OnWindowOpen);

    HyprlandAPI::reloadConfig();

    return {
        "hyprland-window-move",
        "Testing plugin adding xdg_top_level::move request handler",
        "horriblename",
        PLUGIN_VERSION
    };
}

APICALL EXPORT void PLUGIN_EXIT() {}
